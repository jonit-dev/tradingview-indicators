//@version=5
strategy("BTC â€“ Fire-stop + White-cross re-entry", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// --- INPUTS ---
length = input.int(200, "PowerLaw pct length")
upperPct = input.float(90, "Upper percentile")
lowerPct = input.float(45, "Lower percentile")
atrLen = input.int(14, "ATR length")
atrMult = input.float(2, "ATR mult")
showLabels = input.bool(true, "Show Action Labels")
showTable = input.bool(true, "Show Status Table")
labelSize = input.string("small", "Label Size", options=["tiny", "small", "normal"])

// --- DATA ---
btcClose = request.security("BTCUSD", timeframe.period, close)
goldClose = request.security("XAUUSD", timeframe.period, close)
days = (time - timestamp(2009,01,03)) / 86400000
modPrice = math.exp(5.71 * math.log(days) - 38.16)
osc = ((btcClose - modPrice) / modPrice) * 100

// --- PERCENTILE BANDS ---
var arr = array.new_float()
if barstate.isconfirmed
    array.unshift(arr, osc)
    if array.size(arr) > length
        array.pop(arr)

pct(src,p) =>
    tmp = array.copy(src)
    array.sort(tmp, order.ascending)
    idx = math.max(0, math.floor((array.size(tmp) - 1) * p / 100))
    array.get(tmp, idx)

ploUpper = pct(arr, upperPct)
ploLower = pct(arr, lowerPct)

// --- RELATIVE STRENGTH ---
relStr = ta.ema(ta.roc(btcClose,1) - ta.roc(goldClose,1), 14)

// --- SIGNALS ---
fire = osc > ploUpper and relStr > 8
ice = osc < ploLower and relStr < -2
crossUp = ta.crossover(osc, ploLower)

// --- STRATEGY ---
var float stopLevel = na
lblSize = labelSize == "tiny" ? size.tiny : labelSize == "small" ? size.small : size.normal

// Reset stop when position is closed
if strategy.position_size == 0
    stopLevel := na

// Update trailing stop on fire signal
if fire and strategy.position_size > 0
    newStop = low - atrMult * ta.atr(atrLen)
    // Only update if new stop is higher (trailing up)
    if na(stopLevel) or newStop > stopLevel
        stopLevel := newStop
        if showLabels
            label.new(bar_index, high, "STOP\n" + str.tostring(stopLevel, "#.##"), color=color.red, textcolor=color.white, style=label.style_label_down, size=lblSize, yloc=yloc.abovebar)

// CRITICAL: Apply the exit order on EVERY bar when we have a stop level
if strategy.position_size > 0 and not na(stopLevel)
    strategy.exit("FireStop", from_entry="Long", stop=stopLevel)

// Entry signals (only when flat)
if crossUp and strategy.position_size == 0
    strategy.entry("Long", strategy.long, comment="CrossUp re-entry")
    if showLabels
        label.new(bar_index, low, "BUY\nCROSS UP", color=color.green, textcolor=color.white, style=label.style_label_up, size=lblSize, yloc=yloc.belowbar)

if ice and strategy.position_size == 0
    strategy.entry("Long", strategy.long, comment="Ice entry")
    if showLabels
        label.new(bar_index, low, "BUY\nICE", color=color.blue, textcolor=color.white, style=label.style_label_up, size=lblSize, yloc=yloc.belowbar)

// First departure from green zone
if osc[1] > ploLower and osc < ploLower and strategy.position_size == 0
    strategy.entry("Long", strategy.long, comment="Green zone departure")
    if showLabels
        label.new(bar_index, low, "BUY\nGREEN EXIT", color=color.green, textcolor=color.white, style=label.style_label_up, size=lblSize, yloc=yloc.belowbar)

// --- VISUAL ELEMENTS ---
plot(stopLevel, "Stop Level", color=color.red, style=plot.style_linebr, linewidth=3)
plotshape(strategy.position_size > 0 and not na(stopLevel) ? stopLevel : na, "Stop Points", shape.circle, location.absolute, color.red, size=size.tiny)

// --- POSITION INFO TABLE ---
if showTable
    var table posTable = table.new(position.top_right, 2, 5)
    
    if barstate.islast
        // Headers
        table.cell(posTable, 0, 0, "STATUS", bgcolor=color.gray, text_color=color.white)
        table.cell(posTable, 1, 0, strategy.position_size > 0 ? "IN POSITION" : "FLAT", bgcolor=strategy.position_size > 0 ? color.green : color.gray, text_color=color.white)
        
        // Position info
        if strategy.position_size > 0
            table.cell(posTable, 0, 1, "Entry Price", bgcolor=color.new(color.gray, 80))
            table.cell(posTable, 1, 1, str.tostring(strategy.position_avg_price, "#.##"), bgcolor=color.new(color.gray, 80))
            
            table.cell(posTable, 0, 2, "Current Price", bgcolor=color.new(color.gray, 90))
            table.cell(posTable, 1, 2, str.tostring(close, "#.##"), bgcolor=color.new(color.gray, 90))
            
            table.cell(posTable, 0, 3, "Stop Level", bgcolor=color.new(color.gray, 80))
            table.cell(posTable, 1, 3, na(stopLevel) ? "No Stop" : str.tostring(stopLevel, "#.##"), bgcolor=color.new(color.gray, 80), text_color=na(stopLevel) ? color.orange : color.red)
            
            // P&L
            pnl = (close - strategy.position_avg_price) / strategy.position_avg_price * 100
            table.cell(posTable, 0, 4, "P&L %", bgcolor=color.new(color.gray, 90))
            table.cell(posTable, 1, 4, str.tostring(pnl, "#.##") + "%", bgcolor=color.new(color.gray, 90), text_color=pnl > 0 ? color.green : color.red)

// --- SIGNAL ZONES ---
bgcolor(fire ? color.new(color.red, 90) : na, title="Fire Zone")
bgcolor(ice ? color.new(color.blue, 90) : na, title="Ice Zone")
bgcolor(crossUp ? color.new(color.green, 80) : na, title="Cross Up Signal")
