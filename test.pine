//@version=5
strategy("Enhanced Monthly Asset Rotation Strategy", overlay=false, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=100000, currency=currency.USD)

// Input Parameters
var float MAX_POSITION_SIZE = 100.0  // Maximum position size as percentage
var float MIN_POSITION_SIZE = 25.0   // Minimum position size as percentage
var float STOP_LOSS_PCT = 5.0        // Stop loss percentage
var int VOL_PERIOD = 20              // Volatility calculation period
var float VOL_THRESHOLD = 25.0       // Annualized volatility threshold
var float TREND_THRESHOLD = 0.0      // Minimum trend strength required

// Define the list of symbols for each month
symbol_jan = "IWM"
symbol_feb = "XLU"
symbol_mar = "XLF"
symbol_apr = "SPY"
symbol_may = "XLY"
symbol_jun = "EEM"
symbol_jul = "QQQ"
symbol_aug = "GLD"
symbol_sep = "TLT"
symbol_oct = "DIA"

symbol_nov = "VFH"
symbol_dec = "VTI"

// Function to calculate technical indicators for a symbol
calcIndicators(string symbol) =>
    [close_price, high_price, low_price] = request.security(symbol, timeframe.period, [close, high, low])
    
    // Calculate volatility
    vol = ta.stdev(math.log(close_price / close_price[1]), VOL_PERIOD) * math.sqrt(252) * 100
    
    
    // Calculate trend strength using ADX
    adx = ta.dmi(14, 14)[2]
    
    // Calculate moving averages for trend confirmation
    sma50 = ta.sma(close_price, 50)
    sma200 = ta.sma(close_price, 200)
    
    [close_price, vol, adx, sma50, sma200]

// Get current month and symbol
current_month = month(time)
current_symbol = switch current_month
    1 => symbol_jan
    2 => symbol_feb
    3 => symbol_mar
    4 => symbol_apr
    5 => symbol_may
    6 => symbol_jun
    7 => symbol_jul
    8 => symbol_aug
    9 => symbol_sep
    10 => symbol_oct
    11 => symbol_nov
    12 => symbol_dec
    => "SPY"

// Get technical indicators for current symbol
[sym_close, volatility, trend_strength, ma50, ma200] = calcIndicators(current_symbol)

// Position Sizing based on Kelly Criterion and Volatility
calcPositionSize() =>
    // Simplified Kelly Criterion
    win_rate = 0.55  // Historical win rate
    risk_ratio = 2.0  // Reward-to-risk ratio
    kelly_pct = (win_rate * risk_ratio - (1 - win_rate)) / risk_ratio
    
    // Volatility adjustment
    vol_factor = math.max(0, 1 - (volatility / VOL_THRESHOLD))
    
    // Final position size
    pos_size = math.min(MAX_POSITION_SIZE, 
                       math.max(MIN_POSITION_SIZE, 
                              kelly_pct * 100 * vol_factor))
    pos_size

// Calculate entry conditions
isEntryValid() =>
    vol_ok = volatility < VOL_THRESHOLD
    trend_ok = trend_strength > TREND_THRESHOLD
    above_ma = sym_close > ma200  // Basic trend filter
    vol_ok and trend_ok and above_ma

// Strategy Logic
is_new_month = ta.change(month(time))
position_size = calcPositionSize()

if is_new_month
    // Close existing positions
    strategy.close_all()
    
    // Enter new position if conditions are met
    if isEntryValid()
        strategy.entry("Long", strategy.long, 
                      qty_percent=position_size, 
                      comment=current_symbol + " Size: " + str.tostring(position_size, "#.##") + "%")

// Dynamic Stop Loss
stop_price = strategy.position_avg_price * (1 - STOP_LOSS_PCT/100)
if strategy.position_size > 0 and sym_close < stop_price
    strategy.close_all("Stop Loss")

// Performance Tracking
var float cum_return = 100000
if not na(sym_close) and not na(sym_close[1])
    return_pct = (sym_close - sym_close[1]) / sym_close[1]
    cum_return := cum_return * (1 + return_pct)

// Benchmark Tracking
benchmark_close = request.security("SPY", timeframe.period, close)
var float cum_benchmark = 100000
if not na(benchmark_close) and not na(benchmark_close[1])
    benchmark_return = (benchmark_close - benchmark_close[1]) / benchmark_close[1]
    cum_benchmark := cum_benchmark * (1 + benchmark_return)

// Plotting
plot(cum_return, title="Strategy Returns", color=color.green, linewidth=2)
plot(cum_benchmark, title="Benchmark Returns", color=color.orange, linewidth=2)
plot(volatility, title="Volatility", color=color.purple, linewidth=1)

// Risk Management Table
if barstate.islast
    var table risk_table = table.new(position.top_right, 2, 5, border_width=1)
    table.cell(risk_table, 0, 0, "Metric", bgcolor=color.gray)
    table.cell(risk_table, 1, 0, "Value", bgcolor=color.gray)
    table.cell(risk_table, 0, 1, "Position Size")
    table.cell(risk_table, 1, 1, str.tostring(position_size, "#.##") + "%")
    table.cell(risk_table, 0, 2, "Volatility")
    table.cell(risk_table, 1, 2, str.tostring(volatility, "#.##") + "%")
    table.cell(risk_table, 0, 3, "Stop Loss")
    table.cell(risk_table, 1, 3, str.tostring(STOP_LOSS_PCT, "#.##") + "%")
    table.cell(risk_table, 0, 4, "Trend Strength")
    table.cell(risk_table, 1, 4, str.tostring(trend_strength, "#.##"))
