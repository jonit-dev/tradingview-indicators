//@version=5
strategy("BTC - Power Law Oscillator Leverage Variation Strategy", overlay=false, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=10000, pyramiding=10)

// Inputs from Power Law Oscillator
length = input.int(200, minval=1, title="Percentile Calculation Period")
upper_percentile = input.float(90, "Upper Percentile", minval=50, maxval=100)
lower_percentile = input.float(45, "Lower Percentile", minval=0, maxval=50)

// Inputs from BTC vs Gold
btcSymbol = input.symbol("BTCUSD", "Bitcoin Symbol")
goldSymbol = input.symbol("XAUUSD", "Gold Symbol")
smoothPeriod = input.int(14, "Smoothing Period", minval=1)
gold_upper = input.float(8, "Gold Upper Threshold")
gold_lower = input.float(-2, "Gold Lower Threshold")

// Leverage Settings
max_leverage = input.float(5.0, "Max Leverage")
leverage_step = input.float(1.0, "Leverage Step")

// Fetch data
btcClose = request.security(btcSymbol, timeframe.period, close)
goldClose = request.security(goldSymbol, timeframe.period, close)

// Power Law Oscillator Calculations
var inceptionDate = timestamp(2009, 1, 3, 0, 0)
daysSinceInception = (time - inceptionDate) / 86400000
modelPrice = math.exp(5.71 * math.log(daysSinceInception) - 38.16)
oscillator = ((btcClose - modelPrice) / modelPrice) * 100

// Array for percentile
var float[] osc_values = array.new_float(0)

// Update array
if barstate.isrealtime or barstate.isconfirmed
    array.unshift(osc_values, oscillator)
    if array.size(osc_values) > length
        array.pop(osc_values)

// Percentile function
percentile(float[] arr, float percent) =>
    arr_sorted = array.copy(arr)
    array.sort(arr_sorted, order.ascending)
    index = math.floor((array.size(arr_sorted) - 1) * percent / 100)
    array.get(arr_sorted, index)

// Bands for Power Law
upperBand = percentile(osc_values, upper_percentile)
lowerBand = percentile(osc_values, lower_percentile)

// BTC vs Gold Calculations (for signals only)
btcReturn = ta.roc(btcClose, 1)
goldReturn = ta.roc(goldClose, 1)
relativeStrength = btcReturn - goldReturn
smoothedStrength = ta.ema(relativeStrength, smoothPeriod)

// Conditions
plo_overbought = oscillator > upperBand
plo_oversold = oscillator < lowerBand
gold_over = smoothedStrength > gold_upper
gold_under = smoothedStrength < gold_lower

// Signal definitions
freeze_signal = plo_oversold and gold_under  // ❄️
fire_signal = plo_overbought and gold_over   // 🔥

// Leverage Logic
var float desired_leverage = 0.0

if freeze_signal
    desired_leverage := math.min(desired_leverage + leverage_step, max_leverage)

if fire_signal
    desired_leverage := 0.0

// Position Adjustment
float current_qty = strategy.position_size
float target_qty = strategy.equity * desired_leverage / close  // Note: close should be btcClose if different timeframe, but assuming same

if target_qty > current_qty and strategy.equity > 0
    float add_qty = target_qty - current_qty
    strategy.entry("Long Add", strategy.long, qty=add_qty)

if target_qty < current_qty and current_qty > 0
    float reduce_qty = current_qty - target_qty
    if target_qty <= 0
        strategy.close("Long", comment="Deleverage Completely")
    else
        strategy.close("Long", qty=reduce_qty, comment="Reduce Leverage")

// Plots for Power Law
plot(oscillator, color=color.white, linewidth=2, title="Power Law Oscillator")
plot(upperBand, color=color.red, linewidth=2, title="PLO Upper Band")
plot(lowerBand, color=color.green, linewidth=2, title="PLO Lower Band")

// Background colors for PLO
bgcolor(plo_overbought ? color.new(color.red, 80) : na)
bgcolor(plo_oversold ? color.new(color.green, 80) : na)

// Background colors for Gold (independent, will overlay with PLO for intensification)
bgcolor(gold_over ? color.new(color.red, 80) : na)
bgcolor(gold_under ? color.new(color.green, 80) : na)

// Add small emojis for intensified signals
plotchar(freeze_signal, "Freeze Signal", char="❄️", location=location.bottom, color=color.green, size=size.tiny)
plotchar(fire_signal, "Fire Signal", char="🔥", location=location.top, color=color.red, size=size.tiny)

// Display current position and leverage info
var table infoTable = table.new(position.top_right, 2, 5, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(infoTable, 0, 0, "Position:", text_color=color.black)
    table.cell(infoTable, 1, 0, strategy.position_size > 0 ? "Long" : "Cash", text_color=color.black)
    table.cell(infoTable, 0, 1, "Desired Leverage:", text_color=color.black)
    table.cell(infoTable, 1, 1, str.tostring(desired_leverage, "#.#") + "x", text_color=color.black)
    table.cell(infoTable, 0, 2, "Current Qty:", text_color=color.black)
    table.cell(infoTable, 1, 2, str.tostring(current_qty, "#.####"), text_color=color.black)
    table.cell(infoTable, 0, 3, "Target Qty:", text_color=color.black)
    table.cell(infoTable, 1, 3, str.tostring(target_qty, "#.####"), text_color=color.black)
    table.cell(infoTable, 0, 4, "Equity:", text_color=color.black)
    table.cell(infoTable, 1, 4, str.tostring(strategy.equity, "#.##"), text_color=color.black)
