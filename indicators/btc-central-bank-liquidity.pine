//@version=5
indicator("BTC Power of Law x Central Bank Liquidity", overlay=false)

// ---------------------------
// Parameters
// ---------------------------
cbs_length = input.int(14, title="CBS ROC Period", minval=1)
zscore_length = input.int(100, title="Z-Score Length", minval=1)
signal_smoothing = input.int(9, title="Signal EMA Period", minval=1)
threshold_upper = input.float(70.0, title="Upper Threshold", step=0.1)
threshold_lower = input.float(30.0, title="Lower Threshold", step=0.1)
cbs_ma_length = input.int(40, title="CBS Moving Average Length", minval=1)

// ---------------------------
// Calculate Days Since Inception
// ---------------------------
var inceptionDate = timestamp(2009, 1, 3, 0, 0)
daysSinceInception = (time - inceptionDate) / 86400000
daysSinceInception := daysSinceInception < 1 ? 1 : daysSinceInception  // Prevent log(0)

// ---------------------------
// Power Law Model Price
// ---------------------------
// Define the exponential model: price = exp(5.71 * ln(days) - 38.16)
modelPrice = math.exp(5.71 * math.log(daysSinceInception) - 38.16)

// ---------------------------
// Power Law Oscillator
// ---------------------------
// Calculate the Power Law Oscillator as the percentage deviation from the model price
powerLawOscillator = ((close - modelPrice) / modelPrice) * 100

// ---------------------------
// Fetch Central Bank Balance Sheets (Weekly Data)
// ---------------------------
us_cbs = request.security('ECONOMICS:USCBBS', 'W', close, gaps=barmerge.gaps_off)
jp_cbs = request.security('ECONOMICS:JPCBBS', 'W', close, gaps=barmerge.gaps_off)
cn_cbs = request.security('ECONOMICS:CNCBBS', 'W', close, gaps=barmerge.gaps_off)
eu_cbs = request.security('ECONOMICS:EUCBBS', 'W', close, gaps=barmerge.gaps_off)

// Fetch FX rates (Daily Data)
usd_jpy = request.security('FX:USDJPY', timeframe.period, close, gaps=barmerge.gaps_off)
usd_cny = request.security('FX_IDC:USDCNY', timeframe.period, close, gaps=barmerge.gaps_off)
eur_usd = request.security('FX:EURUSD', timeframe.period, close, gaps=barmerge.gaps_off)

// Adjust Non-USD Balance Sheets to USD
jp_cbs_usd = na(jp_cbs) or na(usd_jpy) ? na : jp_cbs / usd_jpy
cn_cbs_usd = na(cn_cbs) or na(usd_cny) ? na : cn_cbs / usd_cny
eu_cbs_usd = na(eu_cbs) or na(eur_usd) ? na : eu_cbs * eur_usd

// Total Adjusted Central Bank Liquidity in USD
total_cbs_usd = na(us_cbs) or na(jp_cbs_usd) or na(cn_cbs_usd) or na(eu_cbs_usd) ? na : us_cbs + jp_cbs_usd + cn_cbs_usd + eu_cbs_usd

// ---------------------------
// Central Bank Liquidity Rate of Change
// ---------------------------
cbs_roc = na(total_cbs_usd) ? na : ta.roc(total_cbs_usd, cbs_length)

// Z-Score Normalization of CBS ROC
cbs_roc_mean = ta.sma(cbs_roc, zscore_length)
cbs_roc_std = ta.stdev(cbs_roc, zscore_length)
cbs_roc_zscore = (cbs_roc - cbs_roc_mean) / cbs_roc_std

// ---------------------------
// Combine Power Law Oscillator with CBS ROC Z-Score
// ---------------------------
// Scale the CBS ROC z-score to make the histogram visible alongside the normalized oscillator
scaled_cbs_zscore = cbs_roc_zscore * 20  // Increased scaling factor for visibility

// Combine the oscillators
raw_combined_oscillator = powerLawOscillator + scaled_cbs_zscore

// Smooth the combined oscillator
smoothed_oscillator = ta.ema(raw_combined_oscillator, signal_smoothing)

// ---------------------------
// Normalize the Oscillator
// ---------------------------
osc_min = ta.lowest(smoothed_oscillator, zscore_length)
osc_max = ta.highest(smoothed_oscillator, zscore_length)
normalized_oscillator = 100 * (smoothed_oscillator - osc_min) / (osc_max - osc_min)

// ---------------------------
// Dynamic Coloring
// ---------------------------
osc_color = normalized_oscillator > threshold_upper ? color.red : normalized_oscillator < threshold_lower ? color.green : color.yellow

// ---------------------------
// Plotting
// ---------------------------
// Plot the normalized oscillator
plot(normalized_oscillator, color=osc_color, linewidth=2, title="Enhanced Power Law Oscillator")

// Determine if the liquidity is rising or falling
cbs_diff = scaled_cbs_zscore - scaled_cbs_zscore[1]
liquidity_color = #33793554

// Plot the scaled Central Bank Liquidity Histogram with dynamic colors
plot(scaled_cbs_zscore, color=liquidity_color, style=plot.style_histogram, title="Central Bank Liquidity (Z-Score)", linewidth=2)

// Add a Moving Average for Central Bank Liquidity (Simple Moving Average)
cbs_ma = ta.sma(scaled_cbs_zscore, cbs_ma_length)

// Determine if cbs_ma is rising or falling
cbs_ma_diff = cbs_ma - cbs_ma[1]

// Conditional color for CBS MA
cbs_ma_color = (cbs_ma > 20 or cbs_ma < -20) ? color.green : (cbs_ma_diff < 0) ? color.red : (cbs_ma_diff > 0 and cbs_ma >= -20 and cbs_ma <= 20) ? color.yellow :color.white  
// Plot the Central Bank Liquidity MA with dynamic color
plot(cbs_ma, color=cbs_ma_color, linewidth=2, title="Central Bank Liquidity MA")



 
// Plot Threshold Lines
hline(threshold_upper, title="Upper Threshold", color=color.gray, linestyle=hline.style_dotted)
hline(threshold_lower, title="Lower Threshold", color=color.gray, linestyle=hline.style_dotted)

// Shaded Zones
bgcolor(normalized_oscillator > threshold_upper ? color.new(color.red, 85) :
       normalized_oscillator < threshold_lower ? color.new(color.green, 85) :
       na, title="Buy/Sell Zones")

// ---------------------------
// Peak and Trough Detection
// ---------------------------
lookback = input.int(5, title="Peak/Trough Lookback", minval=1)
is_peak = ta.pivothigh(normalized_oscillator, lookback, lookback)
is_trough = ta.pivotlow(normalized_oscillator, lookback, lookback)

 